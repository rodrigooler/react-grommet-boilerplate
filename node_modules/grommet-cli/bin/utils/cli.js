'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.themes = undefined;
exports.capitalize = capitalize;
exports.dependenciesSupported = dependenciesSupported;
exports.fileExists = fileExists;
exports.generateProject = generateProject;
exports.runModulesInstall = runModulesInstall;
exports.nodeVersionSupported = nodeVersionSupported;
exports.npmVersionSupported = npmVersionSupported;
exports.getBabelConfig = getBabelConfig;

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _ejs = require('ejs');

var _ejs2 = _interopRequireDefault(_ejs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _walk = require('walk');

var _walk2 = _interopRequireDefault(_walk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('babel-register');

/**
* Node core dependencies
**/


/**
* NPM dependencies
**/


var spawn = _child_process2.default.spawn;

var supportedNodeVersion = '4.4';
var supportedNpmVersion = '3';

var themes = exports.themes = {
  grommet: 'grommet/scss/vanilla/index',
  hpe: 'grommet/scss/hpe/index',
  aruba: 'grommet/scss/aruba/index',
  hpinc: 'grommet/scss/hpinc/index'
};

function capitalize(str) {
  var words = str.split(' ');

  words = words.map(function (word) {
    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
  });

  return words.join(' ');
}

function dependenciesSupported(config) {
  if (!nodeVersionSupported(config.nodeVersion) || !npmVersionSupported(config.npmVersion)) {
    console.error('[' + config.delimiter + '] Grommet requires Node v' + supportedNodeVersion + '+ and NPM v' + supportedNpmVersion + '+.');
    console.error('[' + config.delimiter + '] Currently you have Node ' + process.version + ' and NPM ' + config.npmVersion);
    return false;
  }

  return true;
}

function fileExists(filePath) {
  try {
    _fs2.default.statSync(filePath);
    return true;
  } catch (error) {}
  return false;
}

function generateProject(from, to, options, config) {
  return new Promise(function (resolve) {
    var templateVars = {
      appName: options.app,
      appTitle: capitalize(options.app.replace(/-|_/g, ' ')),
      appDescription: options.description,
      appRepository: options.repository,
      appLicense: options.license,
      appTheme: themes[options.theme]
    };

    console.log('[' + config.delimiter + '] Generating app at: ' + to);
    var walker = _walk2.default.walk(from, { followLinks: false });

    walker.on('file', function (root, stat, next) {
      var source = _path2.default.join(root, stat.name);
      var destinationFolder = _path2.default.join(to, root.split(from)[1]);
      var destinationFile = _path2.default.join(destinationFolder, stat.name);

      var isImageOrEjs = /\.(jpg|jpeg|png|gif|ejs)$/.test(stat.name);
      if (isImageOrEjs) {
        (0, _mkdirp2.default)(destinationFolder, function (err) {
          if (err) {
            throw err;
          }
          _fs2.default.createReadStream(source).pipe(_fs2.default.createWriteStream(destinationFile));
          next();
        });
      } else {
        _ejs2.default.renderFile(source, templateVars, {}, function (err, content) {
          if (err) {
            throw err;
          }
          (0, _mkdirp2.default)(destinationFolder, function (err) {
            if (err) {
              throw err;
            }
            _fs2.default.writeFile(destinationFile, content, function (err) {
              if (err) {
                throw err;
              }
            });
            next();
          });
        });
      }
    });

    walker.on('end', resolve);
  });
}

function runModulesInstall(cwd, config) {
  return new Promise(function (resolve) {
    console.log('[' + config.delimiter + '] Installing dependencies...');
    console.log('[' + config.delimiter + '] If the install fails, make sure to delete your node_modules and run \'npm/yarn install\' again...');

    // try yarn first
    var command = /^win/.test(_os2.default.platform()) ? 'yarn.cmd' : 'yarn';
    spawn(command, ['install'], { stdio: 'inherit', cwd: cwd }).on('error', function () {
      console.log('[' + config.delimiter + '] Installing can be faster if you install Yarn (https://yarnpkg.com/)...');
      command = /^win/.test(_os2.default.platform()) ? 'npm.cmd' : 'npm';
      spawn(command, ['install'], { stdio: 'inherit', cwd: cwd }).on('close', resolve);
    }).on('close', function (code) {
      if (code === 0) {
        resolve();
      }
    });
  });
}

function nodeVersionSupported(nodeVersion) {
  return nodeVersion >= Number(supportedNodeVersion);
}

function npmVersionSupported(npmVersion) {
  return npmVersion >= Number(supportedNpmVersion);
}

function getBabelConfig() {
  var babelrcPath = _path2.default.resolve(process.cwd(), '.babelrc');
  try {
    _fs2.default.accessSync(babelrcPath, _fs2.default.F_OK);
  } catch (e) {
    babelrcPath = _path2.default.resolve(__dirname, '../../.babelrc');
  }

  return JSON.parse(_fs2.default.readFileSync(babelrcPath));
}

exports.default = {
  capitalize: capitalize, dependenciesSupported: dependenciesSupported, fileExists: fileExists, generateProject: generateProject,
  getBabelConfig: getBabelConfig, nodeVersionSupported: nodeVersionSupported, npmVersionSupported: npmVersionSupported,
  runModulesInstall: runModulesInstall, themes: themes
};