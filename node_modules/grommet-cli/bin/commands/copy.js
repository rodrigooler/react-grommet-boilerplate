'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function (vorpal) {
  vorpal.command('copy', 'Uses copy entry in local grommet configuration to move files to ' + 'the distribution folder').option('-p, --paths [paths]', 'Comma-separated paths of content to copy.').action(function (args, cb) {

    if (!config.copyAssets) {
      console.warn(delimiter + ': ' + _chalk2.default.yellow('Nothing to copy, you need to specify copy entry inside grommet-toolbox.config.js.'));

      cb();
    } else {
      (function () {
        var timeId = process.hrtime();

        if (args.options && args.options.paths) {
          console.log(delimiter + ': Copying paths to distribution folder...');

          copyPaths(unescape(args.options.paths).split(','), config.copyAssets).then(function () {
            console.log(delimiter + ': Paths successfully copied...');
            var t = process.hrtime(timeId);
            console.log(_nodeEmoji2.default.get('sparkles') + ' ' + (0, _prettyHrtime2.default)(t));
            cb();
          }).catch(errorHandler);
        } else {
          console.log(delimiter + ': ' + _nodeEmoji2.default.get('hourglass') + ' Copying files to distribution folder...');

          copyAssets(config.copyAssets).then(function () {
            console.log(delimiter + ': ' + _chalk2.default.green('success'));
            var t = process.hrtime(timeId);
            console.log(_nodeEmoji2.default.get('sparkles') + ' ' + (0, _prettyHrtime2.default)(t));
            cb();
          }).catch(errorHandler);
        }
      })();
    }
  });
};

var _child_process = require('child_process');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _babelCore = require('babel-core');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _globToRegexp = require('glob-to-regexp');

var _globToRegexp2 = _interopRequireDefault(_globToRegexp);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _prettyHrtime = require('pretty-hrtime');

var _prettyHrtime2 = _interopRequireDefault(_prettyHrtime);

var _cli = require('../utils/cli');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * Node dependencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               **/


/**
* NPM dependencies
**/


/**
* Local dependencies
**/


var config = (0, _cli.loadConfig)();

var cpuCount = _os2.default.cpus().length;
var delimiter = _chalk2.default.magenta('[grommet:copy]');

function errorHandler(err) {
  console.log(delimiter + ': ' + _chalk2.default.red('failed'));
  console.error(err);
  process.exit(1);
}

var BabelTransform = function (_stream$Transform) {
  _inherits(BabelTransform, _stream$Transform);

  function BabelTransform() {
    _classCallCheck(this, BabelTransform);

    return _possibleConstructorReturn(this, (BabelTransform.__proto__ || Object.getPrototypeOf(BabelTransform)).apply(this, arguments));
  }

  _createClass(BabelTransform, [{
    key: '_transform',
    value: function _transform(chunk, enc, next) {
      if (!this._buffer) {
        this._buffer = '';
      }
      this._buffer += chunk.toString();
      next();
    }
  }, {
    key: '_flush',
    value: function _flush(done) {
      this.push((0, _babelCore.transform)(this._buffer, (0, _cli.getBabelConfig)()).code);
      this._buffer = undefined;
      done();
    }
  }]);

  return BabelTransform;
}(_stream2.default.Transform);

function copyFile(file, destination, runBabel) {
  return new Promise(function (resolve, reject) {
    (0, _mkdirp2.default)(_path2.default.dirname(destination), function (err) {
      if (err) {
        reject(err);
      } else {
        var readStream = _fs2.default.createReadStream(file);
        var writeStream = _fs2.default.createWriteStream(destination);

        if (runBabel) {
          readStream.pipe(new BabelTransform()).pipe(writeStream);
        } else {
          readStream.pipe(writeStream);
        }

        writeStream.on('finish', resolve);
        writeStream.on('error', reject);
      }
    });
  });
}

function copyPaths(paths, copy) {
  return new Promise(function (resolve, reject) {
    var copyPromises = [];
    paths.forEach(function (currentPath) {
      currentPath = currentPath;
      var destination = config.fullDestination;
      var runBabel = false;
      copy.some(function (asset) {
        var pattern = asset.asset || asset;

        var srcPath = currentPath.replace(config.base, '').substring(1);

        var regex = (0, _globToRegexp2.default)(pattern, { globstar: true });
        if (regex.test(srcPath)) {
          // removing wildcards to create the basename
          var baseName = pattern.replace(/\*|\!/g, '');
          destination = _path2.default.join(_path2.default.resolve(asset.dist || destination), baseName !== srcPath ? srcPath.replace(baseName, '') : srcPath
          // make sure to remove the matching part out of the final path
          );
          runBabel = asset.babel;
          return true;
        }
      });

      copyPromises.push(copyFile(currentPath, destination, runBabel));
    });
    Promise.all(copyPromises).then(resolve, reject);
  });
}

function copyChunkExec(chunckedPaths) {
  return new Promise(function (resolve, reject) {
    (0, _child_process.exec)('grommet copy -p ' + chunckedPaths.join(',').replace(' ', '%20'), function (err) {
      if (err) {
        reject(err);
      }
      resolve();
    });
  });
}

function shuffle(array) {
  var currentIndex = array.length;
  var temporaryValue = void 0;
  var randomIndex = void 0;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

function getPathsByAsset(asset) {
  return new Promise(function (resolve, reject) {
    var assetPath = _path2.default.join(config.base, asset.asset ? asset.asset : asset);
    var ignore = ['.DS_Store', '**/.DS_Store'].concat(asset.ignores || []);
    (0, _glob2.default)(assetPath, { nodir: true, dot: true, ignore: ignore }, function (err, files) {
      if (err) {
        reject(err);
      } else {
        resolve(files);
      }
    });
  });
}

function copyAssets(assets) {
  return new Promise(function (resolve, reject) {
    var pathsPromises = [];
    var pathsArray = [];
    assets.forEach(function (asset) {
      var pathsPromise = getPathsByAsset(asset);
      pathsPromises.push(pathsPromise);
      pathsPromise.then(function (paths) {
        pathsArray = pathsArray.concat(paths);
      }, reject);
    });
    Promise.all(pathsPromises).then(function () {
      if (pathsArray.length > 500 && cpuCount >= 2) {
        // too many items, need to spawn process (if machine has multi-core)
        var paths = shuffle(pathsArray);
        var chunckedPromises = [];
        var chunkSize = Math.ceil(paths.length / cpuCount);
        for (var i = 0; i < paths.length; i += chunkSize) {
          var chunkedPaths = paths.slice(i, i + chunkSize);
          var chunckedPromise = copyChunkExec(chunkedPaths);
          chunckedPromises.push(chunckedPromise);
        }
        Promise.all(chunckedPromises).then(resolve, reject);
      } else {
        copyPaths(pathsArray, assets).then(resolve, reject);
      }
    }, reject);
  });
}

;