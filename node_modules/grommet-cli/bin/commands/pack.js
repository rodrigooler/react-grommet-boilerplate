'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (vorpal) {
  vorpal.command('pack', 'Builds a grommet application for development and/or production').action(function (args, cb) {
    var timeId = process.hrtime();

    deleteDistributionFolder().then(packProject).then(function () {
      console.log(delimiter + ': ' + _chalk2.default.green('success'));
      var t = process.hrtime(timeId);
      console.log(_nodeEmoji2.default.get('sparkles') + ' ' + (0, _prettyHrtime2.default)(t));
    }).catch(function (err) {
      errorHandler(err);
      process.exit(1);
    });
  });
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _prettyHrtime = require('pretty-hrtime');

var _prettyHrtime2 = _interopRequireDefault(_prettyHrtime);

var _opener = require('opener');

var _opener2 = _interopRequireDefault(_opener);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevServer = require('webpack-dev-server');

var _webpackDevServer2 = _interopRequireDefault(_webpackDevServer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* NPM dependencies
**/
var delimiter = _chalk2.default.magenta('[grommet:pack]'); /**
                                                           * Node dependencies
                                                           **/


var ENV = process.env.NODE_ENV || 'production';
var port = process.env.PORT || 3000;

function deleteDistributionFolder() {
  if (ENV === 'production') {
    return new Promise(function (resolve, reject) {
      console.log(delimiter + ': Deleting previously generated distribution folder...');
      (0, _rimraf2.default)(_path2.default.resolve('dist'), function (err) {
        return err ? reject(err) : resolve();
      });
    });
  } else {
    // in dev mode, all resources are compiled and served from memory by
    // webpack-dev-server so there is no reason to delete the dist folder
    return Promise.resolve();
  }
}

function runDevServer(compiler, devServerConfig) {
  console.log(delimiter + ': Starting dev server...');
  var devServer = new _webpackDevServer2.default(compiler, devServerConfig);
  if (!process.env.PORT && devServerConfig.port) {
    port = devServerConfig.port;
  }
  devServer.listen(port, function (err, result) {
    if (err) {
      throw err;
    }
  });
}

function build(config) {
  return new Promise(function (resolve, reject) {
    var handleResponse = void 0;
    // only handle response for production mode
    if (ENV === 'production') {
      handleResponse = function handleResponse(err, stats) {
        var statHandler = function statHandler(stat) {
          if (err) {
            reject(err);
          } else if (stat.compilation.errors.length) {
            reject(stat.compilation.errors);
          } else {
            console.log(stat.toString({
              chunks: false,
              colors: true
            }));
          }
        };

        if (stats.stats) {
          // multiple stats
          stats.stats.forEach(statHandler);
        } else {
          statHandler(stats);
        }
        resolve();
      };
    }
    var compiler = (0, _webpack2.default)(config, handleResponse);

    if (ENV === 'development') {
      var startServer = function startServer(devServerConfig) {
        var firstCompilation = true;
        compiler.plugin('done', function (stats) {
          var statHandler = function statHandler(stat) {
            if (stat.compilation.errors.length) {
              errorHandler(stat.compilation.errors);
            } else {
              console.log(stat.toString({
                chunks: false,
                colors: true
              }));

              console.log(delimiter + ': ' + _chalk2.default.green('success'));

              if (firstCompilation) {
                // https can be an object or just a boolean but either way will
                // be truthy when it is turned on
                var protocol = devServerConfig.https ? 'https' : 'http';
                console.log(delimiter + ': Opening the browser at ' + protocol + '://localhost:' + port);

                (0, _opener2.default)(protocol + '://localhost:' + port);
              }

              firstCompilation = false;
            }
          };

          if (stats.stats) {
            // multiple stats
            stats.stats.forEach(statHandler);
          } else {
            statHandler(stats);
          }
        });
        runDevServer(compiler, devServerConfig);
      };

      var devServerConfig = config.devServer;
      if (!devServerConfig && Array.isArray(config)) {
        config.some(function (c) {
          if (c.devServer) {
            devServerConfig = c.devServer;
            return true;
          }
          return false;
        });
      }
      if (devServerConfig) {
        startServer(devServerConfig);
      } else {
        getDevServerConfig().then(startServer);
      }
    }
  });
}

function getWebpackConfig() {
  return new Promise(function (resolve, reject) {
    var webpackConfig = _path2.default.resolve(process.cwd(), 'webpack.config.js');
    _fsExtra2.default.exists(webpackConfig, function (exists) {
      if (exists) {
        resolve(require(webpackConfig));
      } else {
        webpackConfig = _path2.default.resolve(process.cwd(), 'webpack.config.babel.js');
        _fsExtra2.default.exists(webpackConfig, function (exists) {
          if (exists) {
            resolve(require(webpackConfig).default);
          } else {
            reject('Webpack config not found');
          }
        });
      }
    });
  });
}

function getDevServerConfig() {
  return new Promise(function (resolve, reject) {
    var devServerConfig = _path2.default.resolve(process.cwd(), 'devServer.config.js');
    _fsExtra2.default.exists(devServerConfig, function (exists) {
      if (exists) {
        console.warn(delimiter + ': devServerConfig has been deprecated. Move your configuration to webpack.config devServer entry.');
        resolve(require(devServerConfig));
      } else {
        devServerConfig = _path2.default.resolve(process.cwd(), 'devServer.config.babel.js');
        _fsExtra2.default.exists(devServerConfig, function (exists) {
          if (exists) {
            console.warn(delimiter + ': devServerConfig has been deprecated. Move your configuration to webpack.config devServer entry.');
            resolve(require(devServerConfig).default);
          } else {
            reject('devServer config not found');
          }
        });
      }
    });
  });
}

function packProject() {
  return new Promise(function (resolve, reject) {
    console.log(delimiter + ': Running webpack...');
    getWebpackConfig().then(function (config) {
      return build(config).then(resolve, reject);
    }, reject);
  });
}

function errorHandler() {
  var err = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  console.log(delimiter + ': ' + _chalk2.default.red('failed'));
  var isArray = Array.isArray(err);
  if (isArray) {
    err.forEach(function (e) {
      return console.error(e.message ? e.message : e);
    });
  } else {
    console.error(err.message ? err.message : err);
  }
}

;