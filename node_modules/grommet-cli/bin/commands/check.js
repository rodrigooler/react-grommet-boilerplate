'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (vorpal) {
  vorpal.command('check', 'Runs Javascript/SASS linters and execute tests for your project').option('-u, --updateSnapshot', 'Whether test snapshots should be updated. Defaults to false.').action(function (args, cb) {
    var timeId = process.hrtime();

    runLinters().then(function () {
      return runTests(args.options.updateSnapshot);
    }).then(function () {
      console.log(delimiter + ': ' + _chalk2.default.green('success'));

      var t = process.hrtime(timeId);
      console.log(_nodeEmoji2.default.get('sparkles') + ' ' + (0, _prettyHrtime2.default)(t));
      cb();
    }).catch(function (err) {
      errorHandler(err);
      process.exit(1);
    });
  });
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _prettyHrtime = require('pretty-hrtime');

var _prettyHrtime2 = _interopRequireDefault(_prettyHrtime);

var _jestCli = require('jest-cli');

var _jestCli2 = _interopRequireDefault(_jestCli);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* NPM dependencies
**/
/**
* Node dependencies
**/
var delimiter = _chalk2.default.magenta('[grommet:check]');

function errorHandler(err) {
  console.log(delimiter + ': ' + _chalk2.default.red('failed'));
  var isArray = Array.isArray(err);
  if (isArray) {
    err.forEach(function (e) {
      return console.error(e.message ? e.message : e);
    });
  } else {
    console.error(err.message ? err.message : err);
  }
}

function runJsLint() {
  return new Promise(function (resolve, reject) {
    console.log(delimiter + ': Running Javascript linting...');
    var eslintChild = (0, _child_process.fork)(_path2.default.resolve(__dirname, 'eslint'));
    eslintChild.on('exit', function (code) {
      if (code !== 0) {
        reject('Js Linting failed');
      } else {
        resolve();
      }
    });
    eslintChild.send('**/*.js');
  });
}

function runSCSSLint() {
  return new Promise(function (resolve, reject) {
    console.log(delimiter + ': Running SCSS linting...');
    var scsslintChild = (0, _child_process.fork)(_path2.default.resolve(__dirname, 'scsslint'));
    scsslintChild.on('exit', function (code) {
      if (code !== 0) {
        reject('SCSS Linting failed');
      } else {
        resolve();
      }
    });
    scsslintChild.send('**/*.scss');
  });
}

function runLinters() {
  return new Promise(function (resolve, reject) {
    var errors = [];
    var scssLintCompleted = false;
    var jsLintCompleted = false;
    runJsLint().then(function () {
      jsLintCompleted = true;
      if (scssLintCompleted) {
        if (errors.length === 0) {
          resolve();
        } else {
          reject(errors);
        }
      }
    }, function (err) {
      jsLintCompleted = true;
      errors.push(err);
      if (scssLintCompleted) {
        reject(errors);
      }
    });
    runSCSSLint().then(function () {
      scssLintCompleted = true;
      if (jsLintCompleted) {
        if (errors.length === 0) {
          resolve();
        } else {
          reject(errors);
        }
      }
    }, function (err) {
      scssLintCompleted = true;
      errors.push(err);
      if (jsLintCompleted) {
        reject(errors);
      }
    });
  });
}

function runTests(updateSnapshot) {
  return new Promise(function (resolve, reject) {
    process.env.NODE_ENV = 'test';
    console.log(delimiter + ': Running Tests...');
    var packageJSON = require(_path2.default.resolve(process.cwd(), 'package.json'));
    var config = Object.assign({
      rootDir: process.cwd(),
      updateSnapshot: updateSnapshot
    }, packageJSON.jest);

    _jestCli2.default.runCLI({
      config: config
    }, process.cwd(), function (result) {
      if (result.numFailedTests || result.numFailedTestSuites) {
        reject('Tests Failed');
      } else {
        resolve();
      }
    });
  });
}

;