'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (vorpal) {
  var config = {
    appTypes: ['app', 'basic', 'docs'],
    appThemes: Object.keys(_cli.themes),
    cliPath: _path2.default.join(__dirname, '../../'),
    delimiter: vorpal.chalk.magenta('grommet'),
    npmVersion: Number(_shelljs2.default.exec('npm --version', { silent: true }).stdout.toString().match(/^(\d+\.\d+)/)[1]),
    nodeVersion: Number(process.version.match(/^v(\d+\.\d+)/)[1])
  };

  vorpal.command('new [app]', 'Create a new grommet app.\n       Check type option for different ways to initialize an app.').option('-t, --type [type]', 'Type of the generated app (' + config.appTypes.join() + '). Defaults to app.\n      (You can press tab for autocomplete)', config.appTypes).option('--theme [theme]', 'Theme of the generated app (' + config.appThemes.join() + '). Defaults to grommet.\n      (You can press tab for autocomplete)', config.appThemes).option('-d, --description [description]', 'Quick description of the app. Defaults to empty.').option('-r, --repository [repository]', 'Repository URL of the project. Defaults to empty.').option('-l, --license [license]', 'Project license. Defaults to empty.').option('-i, --noInstall', 'Skip installing modules after generation is completed. Defaults to false.').validate(function (args) {
    if (args.options.type && !config.appTypes.includes(args.options.type)) {
      return 'Invalid type. Available types are: ' + config.appTypes.join();
    }

    if (args.options.theme && !config.appThemes.includes(args.options.theme)) {
      return 'Invalid theme. Available themes are: ' + config.appThemes.join();
    }
    return true;
  }).action(function (args, cb) {
    if (!(0, _cli.dependenciesSupported)(config)) {
      throw 'Unsupported version.';
    }
    var options = Object.assign({
      type: 'app',
      theme: 'grommet',
      app: args.app || 'app-name',
      description: '',
      repository: '',
      license: ''
    }, args.options);

    vorpal.activeCommand.prompt({
      type: 'input',
      name: 'basePath',
      default: process.cwd(),
      message: 'Destination folder (if empty, current folder will be used)?'
    }, function (result) {
      options.basePath = _path2.default.resolve(result.basePath);

      var newAppPath = _path2.default.join(options.basePath, options.app);

      if ((0, _cli.fileExists)(newAppPath)) {
        throw '[' + config.delimiter + '] Error while creating app. Directory "' + newAppPath + '" already exists.';
      }
      (0, _mkdirp2.default)(newAppPath, function (err) {
        if (err) {
          throw err;
        }
        var templateFolder = _path2.default.join(config.cliPath, 'templates', options.type);

        try {
          (0, _cli.generateProject)(templateFolder, newAppPath, options, config).then(function () {
            console.log('[' + config.delimiter + '] App generation successfully completed');
            if (options.noInstall) {
              console.log('[' + config.delimiter + '] Module installation has been skipped');
              return Promise.resolve();
            } else {
              return (0, _cli.runModulesInstall)(newAppPath, config);
            }
          }).then(cb);
        } catch (err) {
          _shelljs2.default.rm('-rf', newAppPath);
          throw err;
        }
      });
    });
  });
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _cli = require('../utils/cli');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Local dependencies
**/


/**
* NPM dependencies
**/
; /**
  * Node core dependencies
  **/